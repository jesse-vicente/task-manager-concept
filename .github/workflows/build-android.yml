name: Android Build
run-name: ${{github.actor}} is deploying to PlayStore internal track
on:
  issue_comment:
    types: [created, edited, deleted]
  workflow_dispatch:

permissions:
  contents: "write"
  issues: "write"
  pull-requests: write
  id-token: "write"

jobs:
  android-build:
    name: Android Build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'issue_comment' || (github.event.issue.pull_request && startsWith(github.event.comment.body, '/deploy-internal')) }}
    steps:
      - name: Update comment with deployment in progress
        if: github.event_name == 'issue_comment'
        uses: jungwinter/comment@v1
        with:
          type: edit
          body: "${{ github.event.comment.body }}\n\n‚è≥ [**Deployment in progress...**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          comment_id: ${{ github.event.comment.id }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: "get-branch"
        if: github.event_name == 'issue_comment'
        run: echo "branch=$(gh pr view $PR_NO --repo $REPO --json headRefName --jq '.headRefName')" >> $GITHUB_OUTPUT
        env:
          REPO: ${{ github.repository }}
          PR_NO: ${{ github.event.issue.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-branch.outputs.branch }}

      - name: Extract whitelabel parameter
        run: echo "WHITELABEL=$(echo '${{ github.event.comment.body }}' | sed -n 's|^/deploy-internal-\(.*\)|\1|p')" >> $GITHUB_ENV

      - name: Display whitelabel
        run: echo "running deployment for $WHITELABEL"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Increment version
        run: cd mobile && npm version patch

      - run: cd mobile && npm test

      # - name: Install dependencies
      #   run: cd mobile && npm install

      # - uses: android-actions/setup-android@v2
      # - uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-
      # - uses: gradle/gradle-build-action@v2
      # - name: Ensure gradlew is executable
      #   run: chmod +x mobile/android/gradlew

      # - name: Build Android project
      #   run: cd mobile/android && ./gradlew assembleDebug

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build
      #     path: |
      #       android/app/build/outputs/**/*.apk
      #       android/app/build/outputs/**/*.aab

  comment:
    needs: [android-build]
    runs-on: ubuntu-latest

    steps:
      - name: Update comment with deployment success
        if: github.event_name == 'issue_comment' && success()
        uses: jungwinter/comment@v1
        with:
          type: edit
          comment_id: ${{ github.event.comment.id }}
          body: "${{ github.event.comment.body }}\n\nüöÄ [**Deployment to staging SUCCESSFUL**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update comment with deployment failure
        if: github.event_name == 'issue_comment' && failure()
        uses: jungwinter/comment@v1
        with:
          type: edit
          comment_id: ${{ github.event.comment.id }}
          body: "${{ github.event.comment.body }}\n\n‚ùå [**Deployment to staging FAILED**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          token: ${{ secrets.GITHUB_TOKEN }}
